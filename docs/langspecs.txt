-------------------------------------------------------------------------------
VLAD: V Logic-based Access-control Database
Language Specifications

Vino Fernando Crescini  <jcrescin@cit.uws.edu.au>
-------------------------------------------------------------------------------
Started 2002 Dec 08
Updated 2005 Dec 10
-------------------------------------------------------------------------------

1. Expressions

  1.1. Identifiers

    Identifiers are case-sensitive, alpha-numeric characters.

    1.1.1 Entity Identifiers

      These are subjects, access rights, objects or groups. The first character
      of an entity identifier must be a lowercase character followed by 0 to
      127 characters of alpha, digit or underscore characters. The regular
      expression is as follows:

      [a-z][a-zA-Z0-9_]{0,127}

    1.1.2 Interval Identifiers

      Interval identifiers denote a time interval whose endpoints may or may
      not be known. Syntax is the same as that of entity identifiers.

      [a-z][a-zA-Z0-9_]{0,127}

    1.1.3 Policy Update Identifiers

      Policy Update identifiers are names of policy updates. Syntax is similar
      to that of entity identifers.

      [a-z][a-zA-Z0-9_]{0,127}

    1.1.4 Variable Identifiers

      Placeholders for entities or intervals. Variables are typed. As such,
      variable identifiers must indicate its type by the first two characters.
      Each variable identifier must begin with one of the following:

      - SS - Subject (Single)
      - SG - Subject (Group)
      - AS - Access Right (Single)
      - AG - Access Right (Group)
      - OS - Object (Single)
      - OG - Object (Group)
      - S  - Subject (Single + Group)
      - A  - Access Right (Single + Group)
      - O  - Object (Single + Group)
      - I  - Interval

      The regular expression for variable identifiers is as follows:

      [SAOI][a-zA-Z0-9_]{0,127}

  1.2. Facts

    1.2.1. Relational (Holds) Facts

      A single logical fact stating a relation between a subject, an access
      right and an object at a particular time interval. There is no
      distinction between singular entities and group entities.

        holds(subject, access_right, object, interval)

    1.2.2. Subset Facts

      A single logical fact describing a set containment relationship to
      another set at a particular time interval.

        subst(g_subject_1, g_subject_2, int_1)

      is read as

        "group g_subject_1 is contained in group g_subject_2 at interval int_1"

      or

        "group g_subject_1 is a subset of group g_subject_2 at interval int_1"

    1.2.3. Membership Facts

      A single logical fact describing the membership of a singular
      subject/access-right/object to a subject/access-right/object group.

        memb(subject_1, g_subject_1, int_1)

      is read as

        "subject_1 is an element of group g_subject_1 at interval int_1"

  1.3. Compound Statements

    1.3.1. Conjuction

      Facts can be grouped together with the logical conjunction AND. Note that
      disjunctions are only allowed in the temporal relation lists (see
      below), but not for expressions. The symbol for this conjuction is &&
      (double ampersand, as it is in C).

        <fact> && <fact> && ...

    1.3.2. Negation

      Facts can be negated with the ! symbol (exclamation-point, as it is
      in C).

        ! <fact>

    1.3.3. Operator Precedence

      The negation operator has higher precedence than the conjunction
      operator.

        ! holds(sub1, acc1, obj1, int1) && ! holds(sub2, acc2, obj2, int2)

      is evaluated as

        (! holds(sub1, acc1, obj1, int1)) && (! holds(sub2, acc2, obj2, int2))

      Compound statements are always evaluated from left to right. This means
      the left-most operator (conjuction or negation) is evaluated first. This
      can be safely ignored since the language contains only 2 operators with
      different precedence levels.

        ! holds(sub1, acc1, obj1, int1) &&
        holds(sub2, acc2, obj2, int2) &&
        holds(sub3, acc3, obj3, int3)

      is evaluated as

        ((! holds(sub1, acc1, obj1, int1)) &&
        holds(sub2, acc2, obj2, int2)) &&
        holds(sub3, acc3, obj3, int3)

    1.3.4. Parentheses

      Parenthesis is not allowed to be used to enclose facts and expressions.

2. Temporal Interval Relations

  The language provides a means to express relations between the temporal
  interval themselves. There is a total of 13 basic relationships that can
  exists between any two intervals:

    - Equals
    - Before
    - During
    - Overlaps
    - Meets
    - Starts
    - Finishes
    - After
    - Contains
    - Overlapped-By
    - Met-By
    - Started-By
    - Finished-By

  Not including the "Equals" relation which is reflexive, the first 6
  relations (before, during, overlaps, meets, starts and finishes) are
  the inverses of the last 6 relations (after, contains, overlapped-by,
  met-by, started-by and finished-by), respectively. For example, if
  interval 1 meets interval 2, then interval 2 is met my interval 1.
  This interesting property allows the language to express all 13
  relations with only the first 7 relations.

  2.1. Temporal Interval Relation Atoms

    The language uses the following syntax to express interval
    relations:

      <relation>(<interval1>, <interval2>)

   where:

     <relation> is one of the following: equals, before, during, overlaps,
       meets, starts or finishes.

     <intervalx> is an interval identifier or an interval variable.

  2.2. Temporal Interval Relation Expression

    A temporal interval relation expression is different from the
    authorisation expressions mentioned in the previous section. It is
    composed entirely of temporal interval relation atoms joined together
    by the comma "," character. An interval relation expression containing
    two relations with the same interval indicates a disjunction, but if
    the intervals are different, it is a conjunction. For example, the
    interval relation expression:

      before(int1, int2), during(int2, int3), before(int2, int1)

    states that int1 is either before or after int2 and that int2 is
    during int3.

3. Policy Definition Statements

  3.1. Entity Identifier Definition Statements

    All entity identifiers must be declared first before any initial facts,
    constraints, policy updates or query statements appear. The following
    syntax must be used to declare entity identifiers.

      entity <type> <entity-identifier>[,<entity-identifier2>[,...]]

      where:

        type is one of the following: sub, acc, obj, sub-grp, acc-grp, obj-grp
        identifier is [a-z][a-zA-Z0-9_]{0,127} and is not a reserved word.

  3.2. Interval Identifier Definition

    All interval identifiers must be declared first before they are used. An
    interval may be declared with endpoints (as integers) or without endpoints.
    The following shows the syntax.

      interval <int-identifier> [\[ep1, ep2\][, ...]]

      where:

        ep1 is a positive integer that denotes the starting time point, while
        ep2 denotes the finishing time point.

  3.3. Initial State Defintion

    The initial state can be defined by the following statement

      initially <expression>

    Note that <expression> may be a conjuction of many facts. Also, the
    initially statement may be used more than once.

  3.4. Temporal Constraint Definition

    Relations between intervals may be defined by this statement. Such
    relations will hold for the entire lifetime of the program. Note that
    the relations must be ground, i.e. interval variables are not allowed.
    Syntax is as follows:

      relaton <interval-expression>;

    Example:

      relation before(int1, int2), starts(int2, int3), during(int3, int3);

  3.5. Policy Update Definition Statement

    A policy update definition statement must be defined in the following
    syntax:

      <update-identifier>([<var1>[,<var2>][,...]]])
      causes <post-condition-expression>
      [if <pre-condition-expression>]
      [where <interval-expression>];

    where:

      <update-identifier> is the identifier of this update.

      <post-condition-expression> an expression that will be true in the
        resulting state after the update is applied.

      <pre-condition-expression> an expression that must be true in the
        current state before the update may be applied.

      <interval-expression> is a non-ground temporal interval relation
        expression that is used to ground any inteval variables occuring
        in the other expressions.

    Note that an update definition statement may have variables:

      delete_write(SS1, OS1)
      causes !holds(SS1, a_write, OS1, I1)
      if holds(SS1, a_write, OS1, I2)
      where before(I1, I2);

    this means

      delete_write(subject1, object1, I2)

    and

      delete_write(subject2, object2, I2)

    will cause

      !holds(subject1, a_write, object1, I1)

    and

      !holds(subject2, a_write, object2, I1)

    if subject1 and subject2 had write access rights to object1 and object2,
    respectively, for all intervals I1 and I2 where I1 is before I2.

    The case where the pre-condition is an empty-set (ie. the update has no
    pre-condition) is represented by omitting the if clause:

      <update-identifier>()
      causes <post-condition-expression>

  3.6. Constraint Definition Statement

    In addition to the initial statement definitions, it is also possible
    to define constraints (or default proposition) in the knowledge base.

    Constraint expressions are true in the intial state and remain true
    after any policy update.

    The most general form:

      always <expression1> implied by <expression2> with absence <expression3>
        where <interval-expression>

    states that expression1 holds if expression2 is true and the truth
    value of expression3 is unknown.

    The interval-expression in the "where" clause is used to ground any
    interval variables that may occur in the other expressions.

    If the "with absence" clause is omitted, then expression1 is applied
    if and only if expression2 is true:

      always <expression1> implied by <expression2>

    Likewise, if the "implied by" clause is omitted, then expression1 holds
    if there is no evidence that expression3 is true:

      always <expression1> with absence <expression3>

    Finally, if both conditions are omitted, then expression1 will always hold:

      always <expression1>

    Identifiers in expressions of constraint rules may contain variables. These
    variables are automatically grounded to all matching entities of the same
    type. Interval variables are replaced by interval identifiers that satisfy
    the constraints defined in the "where" clause.

4. Operations Statements

  4.1. Query Statement

    This statement is used to evaluate queries from the current state. The
    current state will then be derived from the initial state after all
    the updates in the sequence (see below) have been applied.

      query <expression>

    The statement will return one of the following: true, false or ?

  4.2. Compute Statement

    This statement is used to signal the parser to prepare the knowledge
    base for queries. It is important that this statement is declared between
    any number of sequence manipulation statements and query statements.

  4.3. Policy Update Sequence Manipulations

    3.3.1. Add

      This statement is used to append an update reference at the end of
      the update sequence list. An update reference must, of course, be a
      valid update defined in the update definition section.

        seq add <update-ident>([arg1][,arg2][,...]);

    4.3.2. List

      This statement will trigger the output of the update sequence list.

        seq list;

      Output format is:

        <index1> <update-ident1>([arg1][,arg2][,...]);
        <index2> <update-ident2>([arg1][,arg2][,...]);
        ...

      Where <indexn> is the ordinal index (starting from 0) of an update
      as it appears in the sequence.

    4.3.3. Delete

      To remove an update from the update sequence:

        seq del <index>;

      Where <index> is the ordinal index of the corresponding update as
      listed by the "seq list" statement.

5. Comments

  C-style comments may appear anywhere in the file. Any characters
  between "/*" and "*/" will be ignored by the parser.

5. Reserved Words

  The following is a list of words that cannot be used as an identifier:

    - entity
    - interval
    - holds
    - memb
    - subst
    - relation
    - equals
    - before
    - during
    - overlaps
    - meets
    - starts
    - finishes
    - initially
    - implied
    - by
    - with
    - absence
    - always
    - causes
    - if
    - entity
    - sub-grp
    - obj-grp
    - acc-grp
    - sub
    - obj
    - acc
    - query
    - compute
    - seq
    - add
    - del
    - list
