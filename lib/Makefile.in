# This file is part of PolicyUpdater.
#
# Copyright (C) 2003, 2004, 2005, 2006 University of Western Sydney
# by Vino Fernando Crescini <jcrescin@scm.uws.edu.au>
#
# PolicyUpdater is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PolicyUpdater is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with PolicyUpdater; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

TOPSRCDIR = @top_srcdir@
DISTDIR = @DISTDIR@
CURDIR = lib
CC = @CC@
CXX = @CXX@
LEX = @LEX@
YACC = @YACC@
CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@
LN_S = @LN_S@
DEBUG = @DEBUG@
STRIP = @STRIP@
BUILDSHARED = @BUILDSHARED@
SMODELS = @SMODELS@
WRAPPER = @WRAPPER@
STATIC = @STATIC@
VERSION = @VERSION@
BINS =
STATIC_LIBS = libvlad.a
SHARED_LIBS = libvlad.so.$(VERSION)
INCLUDES = \
  config.h \
  vlad.h \
  mem.h \
  list.h \
  stringlist.h \
  numberlist.h \
  varlist.h \
  stringlistlist.h \
  identifier.h \
  atom.h \
  fact.h \
  expression.h \
  rel.h \
  rlist.h \
  symtab.h \
  inttab.h \
  consttab.h \
  updatetab.h \
  seqtab.h \
  tnet.h \
  mapper.h \
  $(SMINCLUDES) \
  $(WRAPINCLUDES) \
  polbase.h \
  $(NULL)
OBJECTS = \
  mem.o \
  list.o \
  stringlist.o \
  numberlist.o \
  varlist.o \
  stringlistlist.o \
  identifier.o \
  fact.o \
  expression.o \
  rel.o \
  rlist.o \
  seqtab.o \
  inttab.o \
  consttab.o \
  updatetab.o \
  symtab.o \
  tnet.o \
  $(SMOBJECTS) \
  $(WRAPOBJECTS) \
  mapper.o \
  polbase.o \
  $(NULL)
TEMPS1 =
TEMPS2 = \
  config.h \
  $(NULL)

ifdef SMODELS
SMINCLUDES = smwrap.h
SMOBJECTS = smwrap.o
SMLIBS = -lsmodels
endif

ifdef WRAPPER
WRAPINCLUDES = wrapper.h
WRAPOBJECTS = wrapper.o
endif

ifdef BUILDSHARED
CXXFLAGS += -f$(BUILDSHARED)
endif

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
includedir = @includedir@

include $(TOPSRCDIR)/rules.mk

libvlad.a : $(OBJECTS)
	$(AR) -rcs $(@) $(OBJECTS)

libvlad.so.$(VERSION) : $(OBJECTS)
	$(CXX) $(LDFLAGS) $(CXXFLAGS) -shared -Wl,-soname,`echo $(@) | cut -d. -f1,2,3` -o $(@) $(OBJECTS) $(SMLIBS) -ltribe
ifndef DEBUG
  ifdef STRIP
	strip $(@)
  endif
endif

mem.o : vlad.h mem.h mem.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c mem.cpp

list.o : vlad.h mem.h list.h list.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c list.cpp

stringlist.o : vlad.h mem.h list.h stringlist.h stringlist.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c stringlist.cpp

numberlist.o : vlad.h mem.h list.h numberlist.h numberlist.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c numberlist.cpp

varlist.o : vlad.h mem.h identifier.h list.h stringlist.h varlist.h varlist.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c varlist.cpp

stringlistlist.o : vlad.h mem.h list.h stringlist.h stringlistlist.h stringlistlist.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c stringlistlist.cpp

identifier.o : vlad.h mem.h identifier.h identifier.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c identifier.cpp

fact.o : vlad.h mem.h stringlist.h varlist.h identifier.h atom.h symtab.h fact.h fact.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c fact.cpp

expression.o : vlad.h mem.h list.h fact.h stringlist.h varlist.h symtab.h expression.h expression.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c expression.cpp

rel.o : vlad.h mem.h list.h stringlist.h varlist.h identifier.h symtab.h rel.h rel.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c rel.cpp

rlist.o : vlad.h mem.h list.h stringlist.h varlist.h rel.h symtab.h rlist.h rlist.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c rlist.cpp

symtab.o : vlad.h mem.h stringlist.h stringlistlist.h varlist.h identifier.h symtab.h symtab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c symtab.cpp

inttab.o : vlad.h mem.h list.h inttab.h inttab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c inttab.cpp

consttab.o : vlad.h mem.h varlist.h expression.h rlist.h consttab.h consttab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c consttab.cpp

updatetab.o : vlad.h mem.h stringlist.h varlist.h rlist.h expression.h updatetab.h updatetab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c updatetab.cpp

seqtab.o : vlad.h mem.h stringlist.h expression.h updatetab.h symtab.h seqtab.h seqtab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c seqtab.cpp

tnet.o : vlad.h mem.h stringlist.h varlist.h symtab.h inttab.h rel.h rlist.h tnet.h tnet.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c tnet.cpp

mapper.o : vlad.h atom.h identifier.h symtab.h mapper.h mapper.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c mapper.cpp

ifdef SMODELS
smwrap.o : vlad.h mem.h smwrap.h smwrap.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c smwrap.cpp
endif

ifdef WRAPPER
wrapper.o : vlad.h mem.h stringlist.h varlist.h fact.h expression.h polbase.h wrapper.h wrapper.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c wrapper.cpp
endif

polbase.o : vlad.h mem.h identifier.h atom.h fact.h expression.h stringlist.h varlist.h rlist.h symtab.h inttab.h mapper.h tnet.h polbase.h polbase.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c polbase.cpp
