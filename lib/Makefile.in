# Vino Fernando Crescini <jcrescin@cit.uws.edu.au>

TOPSRCDIR = @top_srcdir@
DISTDIR = @DISTDIR@
CURDIR = lib
CC = @CC@
CXX = @CXX@
LEX = @LEX@
YACC = @YACC@
CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@
LN_S = @LN_S@
DEBUG = @DEBUG@
STRIP = @STRIP@
BUILDSHARED = @BUILDSHARED@
SMODELS = @SMODELS@
WRAPPER = @WRAPPER@
STATIC = @STATIC@
VERSION = @VERSION@
BINS =
STATIC_LIBS = libvlad.a
SHARED_LIBS = libvlad.so.$(VERSION)
INCLUDES = \
  config.h \
  vlad.h \
  list.h \
  stringlist.h \
  numberlist.h \
  atom.h \
  fact.h \
  expression.h \
  seqtab.h \
  symtab.h \
  consttab.h \
  transtab.h \
  $(SMINCLUDES) \
  $(WRAPINCLUDES) \
  kb.h \
  polbase.h \
  $(NULL)
OBJECTS = \
  list.o \
  stringlist.o \
  numberlist.o \
  atom.o \
  fact.o \
  expression.o \
  seqtab.o \
  symtab.o \
  consttab.o \
  transtab.o \
  $(SMOBJECTS) \
  $(WRAPOBJECTS) \
  kb.o \
  polbase.o \
  $(NULL)
TEMPS1 =
TEMPS2 = \
  config.h \
  $(NULL)

ifdef SMODELS
SMINCLUDES = smwrap.h
SMOBJECTS = smwrap.o
SMLIBS = -lsmodels
endif

ifdef WRAPPER
WRAPINCLUDES = wrapper.h
WRAPOBJECTS = wrapper.o
endif

ifdef BUILDSHARED
CXXFLAGS += -f$(BUILDSHARED)
endif

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
includedir = @includedir@

include $(TOPSRCDIR)/rules.mk

libvlad.a : $(OBJECTS)
	$(AR) -rcs $(@) $(OBJECTS)

libvlad.so.$(VERSION) : $(OBJECTS)
	$(CXX) $(LDFLAGS) $(CXXFLAGS) -shared -Wl,-soname,`echo $(@) | cut -d. -f1,2,3` -o $(@) $(OBJECTS) $(SMLIBS)
ifndef DEBUG
  ifdef STRIP
	strip $(@)
  endif
endif

list.o : list.h list.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c list.cpp

stringlist.o : list.h stringlist.h stringlist.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c stringlist.cpp

numberlist.o : list.h numberlist.h numberlist.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c numberlist.cpp

atom.o : atom.h atom.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c atom.cpp

fact.o : fact.h fact.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c fact.cpp

expression.o : list.h atom.h expression.h expression.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c expression.cpp

symtab.o : stringlist.h symtab.h symtab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c symtab.cpp

consttab.o : expression.h consttab.h consttab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c consttab.cpp

transtab.o : stringlist.h expression.h transtab.h transtab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c transtab.cpp

seqtab.o : stringlist.h expression.h seqtab.h seqtab.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c seqtab.cpp

ifdef SMODELS
smwrap.o : smwrap.h smwrap.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c smwrap.cpp
endif

ifdef WRAPPER
wrapper.o : kb.h wrapper.h wrapper.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c wrapper.cpp
endif

kb.o : expression.h symtab.h consttab.h transtab.h $(SMINCLUDES) kb.h kb.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c kb.cpp

polbase.o : symtab.o polbase.h polbase.cpp
	$(CXX) $(CXXFLAGS) -o $(@) -c polbase.cpp
